Optimisation walk-forward : Elle utilise une approche d’optimisation walk-forward, qui consiste à diviser la série temporelle en fenêtres d’optimisation et de test, puis à glisser ces fenêtres sur l’ensemble des données. Cela permet de simuler des conditions de marché variées et d’éviter l’overfitting, ce qui est crucial pour le swing trade en conditions réelles.
Validation croisée (k-folds) : La méthode applique une validation croisée (par défaut 5 folds), ce qui renforce la robustesse des résultats en testant la stratégie sur plusieurs segments du marché. Cela permet de vérifier la stabilité et la performance de la stratégie sur différentes périodes.
Filtrage avancé : Elle intègre un filtrage des stratégies selon des critères professionnels : drawdown maximal, profit factor, win rate, durée moyenne des trades, ratio gain/perte, et complexité des paramètres. Ce filtrage garantit que seules les stratégies robustes et simples sont retenues, ce qui est essentiel pour le swing trade.
Contrôle de l’overfitting : La méthode calcule le ratio de sur-apprentissage (overfit ratio) entre les performances en optimisation et en test, et marque les stratégies instables ou sur-optimisées. Cela évite de sélectionner des stratégies qui ne fonctionneraient pas en production.
Paramétrage flexible : Les fenêtres d’optimisation, de test et de glissement sont paramétrables en pourcentage du nombre total de bougies, ce qui permet d’adapter la méthode à différents horizons de swing trade.
Multi-stratégies : Elle optimise et teste plusieurs familles de stratégies (trend following, SMA crossover, RSI, breakout, MACD, mean reversion) et leurs combinaisons IN/OUT, ce qui est adapté à la diversité des marchés et des styles de swing trading.





Analyser StrategieHelper.optimseStrategy(BarSeries series, double optimWindowPct, double testWindowPct, double stepWindowPct, StrategyFilterConfig filterConfig, SwingTradeOptimParams swingParams), ensuite pour optimseStrategyMix(List<BarSeries> seriesList, List<Class<? extends TradeStrategy>> inCombo, List<Class<? extends TradeStrategy>> outCombo), il faut tu adapter le Filtrage avancé dans optimseStrategyMix de la meme manière que dans StrategieHelper.optimseStrategy.
N'oublie pas de vérifier aucune erreur après la modification


revoir fltredOut